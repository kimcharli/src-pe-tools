package net.juniper.smgt.sae.sae;


/**
* net/juniper/smgt/sae/sae/Select.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from saeaccess.idl
* Sunday, February 1, 2009 10:24:16 PM EST
*/

public final class Select implements org.omg.CORBA.portable.IDLEntity
{

  /**
     * A list of attributes retrieved from the selected object.
     *
     * The names of the attributes are Bean properties of the associated
     * object in the SAE core API. See the online documentation for the 
     * Subscription.java and Service.java classes in the SAE core API. The online 
     * documentation for the SAE core API is on the SDX software CD at the
     * following location: /SDK/doc/sae/index.html. 
     * 
     * An empty sequence specifies that no attributes are to be selected.
     * A sequence identified by an asterisk (*) specifies that all attributes
     * be selected.
     *  
     * you can select fields of compound attributes (that is,
     * the Bean property
     * attribute or usage)by using the string
     * "<compoundAttribute>.*"
     *
     */
  public String attributes[] = null;

  /**
     * A string that contains a simplified LDAP query. The following lists
     * shows the values that you can use for LDAP filters with methods that take
     * filters as arguments. 
     *
     * List of <attribute\>= <value\> pairs<br>
     * where<br>
     *
     * <attribute\> - Name of an attribute;
     * for example, serviceName or attribute.sn
     *
     * 
     * <value\> - One of the following:
     *
     * - * (asterisk) - Checks for any value.
     *
     * - Explicit string  - Checks whether any value of the property matches
     * the string. Not case sensitive.
     * 
     * - String contains an asterisk (*)  - Checks whether any value of
     * the property contains
     * the string. Not case sensitive. 
     *
     * You can also use the following values in filter strings:
     *     
     *<table>
     *<tr>  
     *<td>Filter String
     *</td>
     *<td>Description
     *</td>
     *</tr> 
     *
     *<tr><td>()</td>
     *<td>Matches no objects</td></tr>
     *
     *<tr><td>(*)</td>
     *<td>Matches all objects</td></tr>
     *
     * <tr><td>(&<filter\><filter\>...)</td>
     *<td>And: true if all filters match</td></tr>
     * 
     * <tr><td>(|<filter\><filter\>...)</td>
     * <td>Or:  true if at least one filter matches</td></tr>
     *
     * <tr><td>(!<filter\>)</td>
     *<td>Not: true if the filter does not match</td></tr> 
     *
     *</table>
     *
     * \b NOTE: To define a special character (* & , ! | \ )in a string,
     * precede it with the backslash symbol (\).             
     */
  public String filter = null;

  public Select ()
  {
  } // ctor

  public Select (String[] _attributes, String _filter)
  {
    attributes = _attributes;
    filter = _filter;
  } // ctor

} // class Select
