package net.juniper.smgt.sae.sae;


/**
* net/juniper/smgt/sae/sae/_ScriptProcessorStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from saescript.idl
* Sunday, February 1, 2009 10:24:23 PM EST
*/

public class _ScriptProcessorStub extends org.omg.CORBA.portable.ObjectImpl implements net.juniper.smgt.sae.sae.ScriptProcessor
{


  /**
     * Install and compile a script without executing it.
     *
     * @param[in] scriptName the name under which the script is installed.
     *
     * @param[in] script the source code of the script.
     *
     * @param[in] force if set to true, overwrite the script if it
     * already exists.
     *
     * @throws ScriptSyntaxError if the script could not be compiled
     * @throws OperationFailed if the script could not be installed
     */
  public void install (String scriptName, String script, boolean force) throws net.juniper.smgt.sae.sae.ScriptSyntaxError, net.juniper.smgt.sae.sae.OperationFailed
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("install", true);
                $out.write_string (scriptName);
                $out.write_wstring (script);
                $out.write_boolean (force);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:smgt.juniper.net/sae/ScriptSyntaxError:1.0"))
                    throw net.juniper.smgt.sae.sae.ScriptSyntaxErrorHelper.read ($in);
                else if (_id.equals ("IDL:smgt.juniper.net/sae/OperationFailed:1.0"))
                    throw net.juniper.smgt.sae.sae.OperationFailedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                install (scriptName, script, force        );
            } finally {
                _releaseReply ($in);
            }
  } // install


  /**
     * execute a previously installed script.
     *
     * @param[in] scriptName the name of the script
     * @param[in] args a list of arguments passed to the script
     * @return a string returned from the script
     *
     * @throws ScriptExecutionError if the execution of the script failed.
     * @throws OperationFailed if the script could not be executed.
     */
  public String execute (String scriptName, String[] args) throws net.juniper.smgt.sae.sae.ScriptExecutionError, net.juniper.smgt.sae.sae.OperationFailed
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("execute", true);
                $out.write_string (scriptName);
                net.juniper.smgt.sae.sae.ArgumentsHelper.write ($out, args);
                $in = _invoke ($out);
                String $result = $in.read_wstring ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:smgt.juniper.net/sae/ScriptExecutionError:1.0"))
                    throw net.juniper.smgt.sae.sae.ScriptExecutionErrorHelper.read ($in);
                else if (_id.equals ("IDL:smgt.juniper.net/sae/OperationFailed:1.0"))
                    throw net.juniper.smgt.sae.sae.OperationFailedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return execute (scriptName, args        );
            } finally {
                _releaseReply ($in);
            }
  } // execute


  /**
     * Execute a script without installing it.
     *
     * \note the operation is optional. If a particular ScriptProcessor does
     * not support single execution, an OperationFailed exception
     * will be raised.
     *
     * @param[in] script the source code of the script.
     * @param[in] args a list of arguments passed to the script
     * @return a string returned from the script
     *
     * @throws ScriptExecutionError if the execution of the script failed.
     * @throws OperationFailed if the script could not be executed.
     */
  public String execOne (String script, String[] args) throws net.juniper.smgt.sae.sae.ScriptSyntaxError, net.juniper.smgt.sae.sae.ScriptExecutionError, net.juniper.smgt.sae.sae.OperationFailed
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("execOne", true);
                $out.write_string (script);
                net.juniper.smgt.sae.sae.ArgumentsHelper.write ($out, args);
                $in = _invoke ($out);
                String $result = $in.read_wstring ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:smgt.juniper.net/sae/ScriptSyntaxError:1.0"))
                    throw net.juniper.smgt.sae.sae.ScriptSyntaxErrorHelper.read ($in);
                else if (_id.equals ("IDL:smgt.juniper.net/sae/ScriptExecutionError:1.0"))
                    throw net.juniper.smgt.sae.sae.ScriptExecutionErrorHelper.read ($in);
                else if (_id.equals ("IDL:smgt.juniper.net/sae/OperationFailed:1.0"))
                    throw net.juniper.smgt.sae.sae.OperationFailedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return execOne (script, args        );
            } finally {
                _releaseReply ($in);
            }
  } // execOne


  /**
     * Remove a previously installed script.
     *
     * @param[in] scriptName the name of the script
     * @throws OperationFailed if the script could not be removed.
     */
  public void uninstall (String scriptName) throws net.juniper.smgt.sae.sae.OperationFailed
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("uninstall", true);
                $out.write_string (scriptName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:smgt.juniper.net/sae/OperationFailed:1.0"))
                    throw net.juniper.smgt.sae.sae.OperationFailedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                uninstall (scriptName        );
            } finally {
                _releaseReply ($in);
            }
  } // uninstall


  /**
     * list currently installed scripts
     *
     * @return list of installed script names.
     */
  public String[] listInstalledScripts ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("listInstalledScripts", true);
                $in = _invoke ($out);
                String $result[] = net.juniper.smgt.sae.sae.StringSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return listInstalledScripts (        );
            } finally {
                _releaseReply ($in);
            }
  } // listInstalledScripts

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:smgt.juniper.net/sae/ScriptProcessor:1.0", 
    "IDL:smgt.juniper.net/sae/SAEFeature:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ScriptProcessorStub
