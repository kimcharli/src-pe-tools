package net.juniper.smgt.sae.sae;


/**
* net/juniper/smgt/sae/sae/SubscriberOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from saeaccess.idl
* Sunday, February 1, 2009 10:24:16 PM EST
*/


/**
   * Interface that is used to manage an active subscriber session.
   * Lets you get information about the session, make service schedules
   * available, add and remove subscriptions, set the session timeout,
   * manage session login, and activate and deactivate services.
   *
   * \b NOTE: All methods raise an UnknownUserException if the subscriber
   * session is no longer active.
   */
public interface SubscriberOperations 
{

  /**
    * The read() method requests information from a subscriber session.
    *
    * The information collected by this method depends on the attributes
    * you specify for a subscription, for the service associated with the
    * subscription, and for the subscriber who subscribes to those services.
    * The attributes you provide are Bean properties of classes
    * in the SAE core API.
    *
    * For information about these properties, see the online 
    * documentation for the SAE core API on the SDX software CD at the
    * following location: /SDK/doc/sae/index.html. 
    *
    * @param[in] subscription Subscription attributes selected. The attribute names
    * are Bean properties of the Subscription class in the SAE core API.
    *
    * @param[in] service 	Service attributes selected. The attribute names
    * are Bean properties of the Service class in the SAE core API.
    *
    * @param[in] attributes 	List of subscriber attributes. The attribute
    * names are Bean properties of the User class in the SAE core API.
    *
    * @return A ReadResult structure that contains all of the selected data.
    *
    * @throws UnknownUserException Raised if a subscriber is not logged in to
    * the subscriber session.
    *
    * @throws NonUniqueUserException Raised if there is more than one
    * active subscriber session for the specified subscriber ID.
    *
    * @throws SAEException Raised if there is an unspecified error condition
    * within the SAE.
    */
  net.juniper.smgt.sae.sae.ReadResult read (net.juniper.smgt.sae.sae.Select subscription, net.juniper.smgt.sae.sae.Select service, String[] attributes) throws net.juniper.smgt.sae.sae.SAEException, net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException;

  /**
     * The readSubscriber() method retrieves specified subscriber attributes
     * from the directory.
     *
     * @param[in] attributes List of subscriber attributes to retrieve.
     * The attribute names are Bean properties of the User class
     * in the SAE core API.
     * A single asterisk (*) in a list indicates that all attributes
     * are to be returned.
     *
     * @return List of selected attributes.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *    
     * @throws UnknownUserException Raised if the subscriber is not logged in
     * to the subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     */
  net.juniper.smgt.sae.sae.Attr[] readSubscriber (String[] attributes) throws net.juniper.smgt.sae.sae.SAEException, net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException;

  /**
     * The readSubscription() method retrieves specified subscription data
     * from the directory.
     *
     * @param[in] selection Selects attributes to return. The attribute names are
     * Bean properties of the Subscription class in the SAE core API.
     *
     * @return List of selected attribute lists. Each list contains
     * attributes for one subscription.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws SAEException Raised if there is an unspecified error condition within
     * the SAE. 
     *   
     */
  net.juniper.smgt.sae.sae.Attr[][] readSubscription (net.juniper.smgt.sae.sae.Select selection) throws net.juniper.smgt.sae.sae.SAEException, net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException;

  /**
     * The readService() method retrieves service data. The current subscriber
     * object does not have to be subscribed to the services for
     * this method to retrieve data.
     *
     * @param[in] selection Selects attributes to return. The attribute names are
     * Bean properties of the Service class in the SAE core API.
     *
     * @return List of selected attribute lists. Each list contains
     * attributes for one service.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.    
     */
  net.juniper.smgt.sae.sae.Attr[][] readService (net.juniper.smgt.sae.sae.Select selection) throws net.juniper.smgt.sae.sae.SAEException, net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException;

  /**
     * The addScheduleEntry() method creates a service schedule for activating,
     * deactivating, or denying a service.
     *
     * @param[in] id		ID of the service schedule entry in the directory.
     *      
     * @param[in] schedTime	Scheduled time for the action(s) to be taken.
     *
     * @param[in] actions	Service action(s) to be taken at a scheduled time.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.    
     *
     * @since 4.1
     */
  void addScheduleEntry (String id, net.juniper.smgt.sae.sae.ScheduledTime schedTime, net.juniper.smgt.sae.sae.ActionExt[] actions) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The updateScheduleEntry() method updates the scheduled times and actions for 
     *  a service schedule that has a specified ID.
     *
     * @param[in] id		ID of the service schedule entry in the directory.
     *
     * @param[in] schedTime	Scheduled time for the action(s) to be taken.
     *
     * @param[in] actions	Service actions to be taken at the scheduled time. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.1
     */
  void updateScheduleEntry (String id, net.juniper.smgt.sae.sae.ScheduledTime schedTime, net.juniper.smgt.sae.sae.ActionExt[] actions) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deleteScheduleEntry() method deletes a service schedule that has
     * a specified ID. 
     *
     * @param[in] id	ID of the service schedule entry in the directory.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE/
     *
     * @since 4.1
     */
  void deleteScheduleEntry (String id) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The getScheduleEntryById() method retrieves a service schedule
     * that has a specified ID.
     *
     * An ID for the ScheduleEntry is the primary key for a specified
     *   subscriber.
     *
     * @param[in] id	ID of the service schedule entry in the directory.
     *
     * @return A service schedule entry.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.1
     */
  net.juniper.smgt.sae.sae.ScheduleEntry getScheduleEntryById (String id) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The getScheduleEntriesByIds() method retrieves schedule entries (ScheduleEntry)
     * by their IDs.
     * 
     * An ID for a ScheduleEntry is the primary key for the specified
     * subscriber.
     *
     * @param[in] ids Sequence of IDs of the service schedule entries
     * in the directory.
     *
     * @return List of schedule entries.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.1
     */
  net.juniper.smgt.sae.sae.ScheduleEntry[] getScheduleEntriesByIds (String[] ids) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The getScheduleEntryIds() method retrieves IDs within a specified range
     * for schedule entries (ScheduleEntry).
     *
     *
     * @param[in] startDate 	Time in msec since 1970-01-01.
     *
     * @param[in] endDate  	Time in msec since 1970-01-01.
     *
     * @return List of IDs associated with a service schedule entry in the directory. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition within
     * the SAE.
     *
     * @since 4.1
     */
  String[] getScheduleEntryIds (long startDate, long endDate) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The addOneTimeScheduleEntry() method adds a service
     * action scheduled for a single time. 
     *
     * @param[in] eventDate	Time in msec since 1970-01-01.
     *
     * @param[in] actions 	Service actions to be taken at the scheduled time. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.0
     * @deprecated In 4.1.
     */
  void addOneTimeScheduleEntry (long eventDate, net.juniper.smgt.sae.sae.Action[] actions) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The updateOneTimeScheduleEntryActions() method updates a service
     * action scheduled for a single time. 
     *
     * @param[in] eventDate 	Time in msec since 1970-01-01.
     * 	
     * @param[in] actions	Service actions to be taken at the scheduled time. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.0
     * @deprecated In 4.1.
     */
  void updateOneTimeScheduleEntryActions (long eventDate, net.juniper.smgt.sae.sae.Action[] actions) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deleteOneTimeScheduleEntries() method deletes service
     * actions that are scheduled for a single time and whose
     * scheduling date falls within a specified range.
     *
     * @param[in] startDate 	Time in msec since 1970-01-01.
     *
     * @param[in] endDate	Time in msec since 1970-01-01.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.0
     * @deprecated In 4.1.
     */
  void deleteOneTimeScheduleEntries (long startDate, long endDate) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The getOneTimeScheduleEntryActions() method retrieves a service
     * action scheduled for a single time.
     *
     * @param[in] eventDate Time in msec since 1970-01-01.
     *
     * @return Sequence of actions specified for the schedule.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.0
     * @deprecated In 4.1.
     */
  net.juniper.smgt.sae.sae.Action[] getOneTimeScheduleEntryActions (long eventDate) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The getOneTimeScheduleEntryEventDates() method retrieves schedule
     * information for a service action that is scheduled for a single
     * time and whose scheduling dates fall within a specified range.
     *
     * @param[in] startDate 	Time in msec since 1970-01-01.
     *
     * @param[in] endDate 	Time in msec since 1970-01-01.
     *
     * @return List of dates.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since 4.0
     * @deprecated In 4.1.
     */
  long[] getOneTimeScheduleEntryEventDates (long startDate, long endDate) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The addSubscriptionAttributes() method adds a subscription to a service to
     * the directory.
     *
     * @param[in] subscriptionName Name of the service for the subscription in
     * the directory. A subscriptionName has the form
     * "<serviceName>[%<subscriptionId>]".
     * 	
     * @param[in] userName <i>(Optional)</i> Username of a subscriber for authorization to
     * use the subscription.
     * 
     * @param[in] password <i>(Optional)</i> Password associated with the username 
     * for authorization to use the subscription.
     * 
     * @param[in] subscriptionAttributes 
     *
     * @return List of reply messages from the authorization plug-in.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  String[] addSubscriptionAttributes (String subscriptionName, String userName, String password, net.juniper.smgt.sae.sae.Attr[] subscriptionAttributes) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The addSubscription() method adds a subscription to a service to
     * the directory.
     *
     * @param[in] subscriptionName Name of the service for the subscription in
     * the directory. A subscriptionName has the form
     * "<serviceName>[%<subscriptionId>]".
     * 	
     * @param[in] userName <i>(Optional)</i> Username of a subscriber for authorization to
     * use the subscription.
     * 
     * @param[in] password <i>(Optional)</i> Password associated with the username 
     * for authorization to use the subscription.
     *
     * @return List of reply messages from the authorization plug-in.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  String[] addSubscription (String subscriptionName, String userName, String password) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deleteSubscription() method removes a subscription to a service
     * from the directory.
     *
     * @param[in] subscriptionName Name of the subscription in the directory.
     *
     * @param[in] userName <i>(Optional)</i> Username for authorization to use
     * the subscription.
     *
     * @param[in] password <i>(Optional)</i> Password associated with the user name 
     * for authorization of the subscription.
     *
     * @return List of reply messages from the authorization plug-in.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  String[] deleteSubscription (String subscriptionName, String userName, String password) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The setSessionTimeout() method specifies the number of seconds after
     * which the subscriber session is automatically deactivated.
     *
     * The session timeout identifies the maximum length of the session. 
     * The time interval starts at the beginning of a session.
     *
     * @param[in] timeout Length of the subscriber session in seconds.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     */
  void setSessionTimeout (int timeout) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The updateSessionTimeout() method updates the session timeout for
     * the current subscriber.
     *
     * The session timeout count begins at the current time,
     * not from the time of the session started.
     * If the subscriber session timeout is inactive, it
     * is activated. If the value for timeout is
     * equal to -1, the session timeout is canceled.
     *
     * @param[in] timeout Maximum length of the session in seconds.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void updateSessionTimeout (int timeout) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The updateServiceSessionTimeout() method updates the timeout of the service
     * session for the specified session.
     *
     * The session timeout count begins at the current time,
     * not from the time the session started.
     * If the session timeout is inactive, it
     * is activated. If the value for timeout is
     * equal to -1, the session timeout is canceled.
     *
     * @param[in] subscriptionName Name of the subscription to be
     * updated.
     *
     * @param[in] sessionName ID of the service session to be
     * updated.
     *
     * @param[in] timeout Length of the service session timeout in seconds.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void updateServiceSessionTimeout (String subscriptionName, String sessionName, int timeout) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The login() method creates a subscriber session.
     *
     * When the operation succeeds, the subscriber object that was
     * in place before the operation becomes invalid, that is the
     * client application of the CORBA remote API can no longer call
     * any methods on this object. The client application must call
     * the getSubscriber() method to request a new subscriber object. 
     *
     * @param[in] loginName	Subscriber's login name.
     *
     * @param[in] password	Subscriber's password associated with the login name. 
     *
     * @return false. \b NOTE: The return value has not been used since version 4.2.
     *
     * @throws LoginException Raised if a subscriber login to a subscriber session fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition within
     * the SAE.
     */
  boolean login (String loginName, String password) throws net.juniper.smgt.sae.sae.LoginException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The logout() method ends the current subscriber session and
     * starts an unauthenticated subscriber session.
     *
     * When the operation succeeds, the subscriber object that was
     * in place before the operation becomes invalid, that is the
     * client application of the CORBA remote API can no longer call
     * any methods on this object. The client application must call
     * the getSubscriber() method to request a new subscriber object. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void logout () throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The disconnect() method triggers subscriber being detached from the network. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnsupportedException Raised if disconnect operation is not
     * supported.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void disconnect () throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnsupportedException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The grantPublicIp() method switches the IP address of a subscriber
     * using DHCP from
     * an unauthenticated IP address to an authenticated
     * IP address. 
     *
     * When the operation succeeds, the subscriber object that was
     * in place before the operation becomes invalid, that is the
     * client application of the CORBA remote API can no longer call
     * any methods on this object. The client application must call
     * the getSubscriber() method to request a new subscriber object. 
     *
     * @param[in] loginName	Subscriber's login name.
     *
     * @param[in] password	Subscriber's password associated with the login name. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void grantPublicIp (String loginName, String password) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The grantPublicIpAttr() method switches the IP address of a subscriber
     * using DHCP from an 
     * unauthenticated IP address to an authenticated IP
     * address. This method requires DHCP attributes in addition to the options
     * required by the grantPublicIp() method.
     *
     * \b NOTE: If the operation is successful, the current subscriber
     * object becomes invalid.
     *
     * @param[in] loginName	Subscriber's login name.
     *
     * @param[in] password	Subscriber's password associated with the login name.
     * 
     * @param[in] attr		Value of string name for Attr.  
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void grantPublicIpAttr (String loginName, String password, net.juniper.smgt.sae.sae.DhcpAttribute[] attr) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The revokePublicIp() method switches the IP address of subscriber
     * using a DHCP connection from an authenticated IP address
     * to an unauthenticated IP address.
     *
     * \b NOTE: If the operation is successful, the current subscriber
     * object becomes invalid.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void revokePublicIp () throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The activateService() method activates a service session. 
     *	
     * To authorize the activation, the SAE sends a plug-in event to
     * all authorization plug-ins that are configured for
     * the service to be activated. A start message informs tracking
     * plug-ins of the service activation.
     *
     * @param[in] subscriptionName Name of the subscription in the directory.
     *
     * @param[in] sessionName ID for the service session to be started. If
     * sessionName is an empty string, the SAE  uses the value sae.DEFAULT_SESSION_NAME
     * instead.
     *
     * @param[in] activationAttributes List of attribute values to be used
     * when the session is activated. Attributes are listed in a sequence of
     * sae::Attr structures as property=values pairs. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     * 
     * @throws OverloadException Raised if the SAE is overloaded at the time of
     * the request and does not perform the requested operation.
     * 
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void activateService (String subscriptionName, String sessionName, net.juniper.smgt.sae.sae.Attr[] activationAttributes) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.OverloadException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The activateServiceSession() method activates a service session and
     * returns its correspondent accounting session ID. 
     *	
     * To authorize the activation, the SAE sends a plug-in event to
     * all authorization plug-ins that are configured for
     * the service to be activated. A start message informs tracking
     * plug-ins of the service activation.
     *
     * @param[in] subscriptionName Name of the subscription in the directory.
     *
     * @param[in] sessionName ID for the service session to be started. If
     * sessionName is an empty string, the SAE  uses the value sae.DEFAULT_SESSION_NAME
     * instead.
     *
     * @param[in] activationAttributes List of attribute values to be used
     * when the session is activated. Attributes are listed in a sequence of
     * sae::Attr structures as property=values pairs. 
     *
     * @return The accounting session ID from the service session. 
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws OverloadException Raised if the SAE is overloaded at the time of
     * the request and does not perform the requested operation.
     * 
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @since Io
     */
  String activateServiceSession (String subscriptionName, String sessionName, net.juniper.smgt.sae.sae.Attr[] activationAttributes) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.OverloadException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The activateServiceBackground() method activates a service session and, if 
     * service activation fails due to a short-lived problem,
     * schedules that activation be attempted again in the background.
     *
     * @param[in] subscriptionName Name of the subscription.
     *
     * @param[in] sessionName Name of the service session. If
     * sessionName is empty, uses the default service session.
     *
     * @param[in] activationAttributes List of attributes to be used
     * during activation.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not
     * available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @deprecated In Io Use activateServiceSession
     */
  void activateServiceBackground (String subscriptionName, String sessionName, net.juniper.smgt.sae.sae.Attr[] activationAttributes) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.OverloadException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The modifyServiceSession() method modifies an active service session.
     *  
     * To authorize the modification, the SAE sends a plug-in event to
     * all authorization plug-ins that are configured for
     * the service to be modified.  
     * For example, an increase in bandwidth could require authorization by
     * an Admission Control Plug-In application. An interim update message
     * informs tracking plug-ins of modifications. 
     *
     * @param[in] subscriptionName Name of  the subscription  the directory.
     *
     * @param[in] sessionName ID for the service session to be modified.
     * An empty string identifies the default service session.
     *
     * @param[in] activationAttributes List of attributes (in the form  
     * property=value pairs) that are set when the service is modified.  
     * The values can include substitutions. 
     * If the UpStreamBandwidth or DownStreamBandwidth properties are set,
     * the delta bandwidth (that is,  the difference between the value for
     * the active session and the new value) is sent to the authorization plug-in.
     * For example, if the service session was originally authorized with an
     * upstream bandwidth of  64 Kbps, and the session is modified to an
     * upstream bandwidth of 32 Kbps, the method publishes a  bandwidth of
     * -32 Kbps to the authorization plug-in. If the controlled bandwidth changes,
     * the interim  update contains the new bandwidth.
     * If substitution values have changed for policies, the existing policies
     * are removed from the router, and new policies are installed. 
     *
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws UnknownServiceSessionException Raised if the requested service
     * session does not exist.  
     *    
     * @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails. 
     *
     * @throws OverloadException Raised if the SAE is overloaded at the time
     * of the request and does not perform the requested operation. 
     * 
     *@throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void modifyServiceSession (String subscriptionName, String sessionName, net.juniper.smgt.sae.sae.Attr[] activationAttributes) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.UnknownServiceSessionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.OverloadException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deactivateService() method deactivates a service session for a 
     * subscription.
     *
     * @param[in] subscriptionName Name of  the subscription in the
     * directory.
     *
     * @param[in] sessionName ID for the service session. An empty
     * string identifies the default service session.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     *  @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void deactivateService (String subscriptionName, String sessionName) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deactivateServiceBackground() method deactivates a service session
     * and, if deactivation fails due to a short-lived problem, 
     * schedules that deactivation be attempted again in the background.
     *
     * @param[in] subscriptionName Name of the subscription.
     *
     * @param[in] sessionName Name of the service session. If
     * sessionName is empty, uses the default service session.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     *  @throws ServiceAuthenticationException Raised if authentication for
     * service activation fails.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void deactivateServiceBackground (String subscriptionName, String sessionName) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deactivateServiceReason() method deactivates a service session  
     * for a subscription and provides a reason for the deactivation.
     *
     * @param[in] subscriptionName Name of the subscription in the
     * directory.
     *
     * @param[in] sessionName ID for the service session. If
     * sessionName is empty, the default service session is used.
     *
     * @param[in] reason Reason for deactivating the session. This 
     * value is available for accounting stop records.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws ServiceAuthenticationException Raised if trying
     * to deactivate a subscription to an activate-only service, if
     * the subscription is filtered by a RADIUS authentication plug-in, or 
     * if a short-lived problem happened while deactivating the
     * subscription.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void deactivateServiceReason (String subscriptionName, String sessionName, int reason) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deactivateServiceBackgroundReason() method deactivates  
     * a service session and if deactivation fails due to a
     * short-lived problem,  schedules that deactivation be
     * attempted again in the background. The method also provides 
     * a reason for the deactivation.
     *
     * @param[in] subscriptionName Name of  the subscription in the
     * directory.
     *
     * @param[in] sessionName ID for the service session. If 
     * sessionName is empty, the default service session is used.
     *
     * @param[in] reason Reason for deactivating the session. This
     * value is available for accounting stop records.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws ServiceAuthenticationException Raised if trying
     * to deactivate a subscription to an activate-only service, or if
     * the subscription is filtered by a RADIUS authentication plug-in. 
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void deactivateServiceBackgroundReason (String subscriptionName, String sessionName, int reason) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * \b NOTE: The fragmentDown() method is only for internal use.
     */
  void fragmentDown (String aggregateSubscriptionName, String aggregateSessionName, String fragmentSessionId) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.UnknownServiceSessionException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * \b NOTE: The fragmentReactivating() method is only for internal use.
     */
  void fragmentReactivating (String aggregateSubscriptionName, String aggregateSessionName, String fragmentSessionId) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.UnknownServiceSessionException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The setActivationTrigger() method changes how a subscription for a service
     * becomes active. You can set activation to one of the following:
     *
     * - ACTIVATE_ON_LOGIN - Subscriptions identified as ACTIVATE_ON_LOGIN are
     * automatically activated when a subscriber session is created. If the
     * setActivationTrigger()changes from MANUAL to ACTIVATE_ON_LOGIN,
     * the subscription becomes active.
     * 
     * - MANUAL - Subscriptions identified as MANUAL are not activated when
     * the subscriber session is created. If setAactivationTrigger()changes from
     * ACTIVATE_ON_LOGIN to MANUAL, the subscription becomes inactive.
     *
     * @param[in] subscriptionName Name of the subscription to be
     * modified.
     *
     * @param[in] activationTrigger Mechanism to activate subscription.
     * Valid values are ACTIVATE_ON_LOGIN or MANUAL.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws UnknownSubscriptionException Raised if the subscription does
     * not exist.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void setActivationTrigger (String subscriptionName, String activationTrigger) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.UnknownSubscriptionException, net.juniper.smgt.sae.sae.ServiceAuthenticationException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The setPersistentSession() method identifies a service subscription
     * that is to start automatically at subscriber login (which creates a service
     * session). 
     *
     * @param[in] subscriptionName Name of the subscription.
     *
     * @param[in] sessionName ID of the service session. An empty
     * string identifies the default service session.
     *
     * @param[in] persistentSessionAttributes List of attributes
     * stored from one subscriber session to another session for
     * the same subscriber.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void setPersistentSession (String subscriptionName, String sessionName, net.juniper.smgt.sae.sae.Attr[] persistentSessionAttributes) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The deletePersistentSession() method deletes a service subscription that
     * automatically starts at subscriber login.
     * 
     * As a result, the subscriber session for the service is not 
     * automatically activated at the next subscriber login. 
     *
     * @param[in] subscriptionName Name of the subscription in the directory.
     *
     * @param[in] sessionName ID for the service session. An empty
     * string identifies the default service session.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void deletePersistentSession (String subscriptionName, String sessionName) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The modifyPersistentSession() method modifies a service subscription that 
     * automatically starts at subscriber login.
     *
     * @param[in] subscriptionName Name of the subscription.
     *
     * @param[in] sessionName ID for the service session. An empty
     * string identifies the default service session.
     *
     * @param[in] active If true, automatically activates the service
     * session.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void modifyPersistentSession (String subscriptionName, String sessionName, boolean active) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The setInterimTime() method sets the interval of the interim update for
     * a service session.
     *
     * @param[in] subscriptionName Name of the subscription for the service session.
     *
     * @param[in] sessionName ID for the service session. An empty
     * string identifies the default service session.
     *
     * @param[in] time Interval for the interim update in seconds.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void setInterimTime (String subscriptionName, String sessionName, int time) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The setSessionVolumeQuota() method sets the volume quota for the session.
     *
     * @param[in] subscriptionName Name of the subscription.
     *
     * @param[in] sessionName ID for the service session. An empty
     * string indicates the default service session.
     *
     * @param[in] sessionVolumeQuota Volume quota for the session in the format:
     * "\<downstreamQuota\>;\<upstreamQuota\>".
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     */
  void setSessionVolumeQuota (String subscriptionName, String sessionName, String sessionVolumeQuota) throws net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.UnknownServiceException, net.juniper.smgt.sae.sae.SAEException;

  /**
     * The getUsage() method retrieves usage information for selected service
     * sessions.
     * 
     * Usage information can include the length of time that a service has
     * been active and the traffic statistics 
     * for a subscriber session. This method lets
     * you develop applications that can dynamically retrieve usage
     * information for active service sessions.
     *
     * You can use the Subscriber.readSubscription() method to retrieve the
     * most recent usage information that has been collected. You can
     * also collect usage information by using interim accounting. 
     *
     * \b NOTE: In response to this method, the SAE reads the current usage
     * data from the router. Because this method causes direct interaction
     * with the router, numerous calls can overload the router and cause
     * service degradation.
     *
     * @param[in] selection Selects usage data to retrieve.
     *
     * @throws UnknownUserException Raised if the subscriber is not
     * logged in to a subscriber session.
     *
     * @throws NonUniqueUserException Raised if there is more than one
     * active subscriber session for the specified subscriber ID.
     *
     * @throws UnknownServiceException Raised if the service is not available.
     *
     * @throws SAEException Raised if there is an unspecified error condition
     * within the SAE.
     *
     * @throws OverloadException Raised if the SAE is overloaded at the time
     * of the request and does not perform the requested operation.
     */
  net.juniper.smgt.sae.sae.Attr[][] getUsage (net.juniper.smgt.sae.sae.Select selection) throws net.juniper.smgt.sae.sae.SAEException, net.juniper.smgt.sae.sae.UnknownUserException, net.juniper.smgt.sae.sae.NonUniqueUserException, net.juniper.smgt.sae.sae.OverloadException;
} // interface SubscriberOperations
